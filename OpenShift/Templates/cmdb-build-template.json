{
  "kind": "Template",
  "apiVersion": "v1",
  "metadata": {
    "name": "cmdb-build",
    "annotations": {
      "description": "",
      "tags": "nodejs",
      "iconClass": "icon-nodejs"
    }
  },
  "labels": {
    "template": "cmdb"
  },
  "objects": [
  {
      "kind": "ImageStream",
      "apiVersion": "v1",
      "metadata":
      {
        "name": "orientdb",
        "generation": 1,
        "creationTimestamp": null
      },
      "spec":
      {
        "tags": [
          {
            "name": "latest",
            "annotations": null,
            "generation": null,
            "importPolicy": {}
          }

        ]
      },
      "status": {}
    },
	{
      "kind": "ImageStream",
      "apiVersion": "v1",
      "metadata":
      {
        "name": "cmdb",
        "generation": 1,
        "creationTimestamp": null
      },
      "spec":
      {
        "tags": [
          {
            "name": "latest",
            "annotations": null,
            "generation": null,
            "importPolicy": {}
          }

        ]
      },
      "status": {}
    },
{
    "kind": "BuildConfig",
    "apiVersion": "v1",
    "metadata": {
        "name": "orientdb",
        "creationTimestamp": null,
        "labels": {
            "app": "orientdb",
            "template": "nodejs"
        }
    },
    "spec": {
        "triggers": [
            {
                "type": "ConfigChange"
            }
        ],
        "runPolicy": "Serial",
        "source": {
            "type": "Dockerfile",
            "dockerfile":  "############################################################\r\n# Dockerfile to run an OrientDB (Graph) Container\r\n############################################################\r\n\r\nFROM registry.access.redhat.com/rhel7\r\n\r\nMAINTAINER OrientDB LTD (info@orientdb.com)\r\n\r\n# Override the orientdb download location with e.g.:\r\n#   docker build -t mine --build-arg ORIENTDB_DOWNLOAD_SERVER=http://repo1.maven.org/maven2/com/orientechnologies/ .\r\nARG ORIENTDB_DOWNLOAD_SERVER\r\n\r\nENV ORIENTDB_VERSION 2.2.26\r\nENV ORIENTDB_DOWNLOAD_MD5 51f07639db0cce7574be6fe0c90e3ba7\r\nENV ORIENTDB_DOWNLOAD_SHA1 7b58eed99b5c5c03139eaa16718e2b048ffcd046\r\n\r\nENV ORIENTDB_DOWNLOAD_URL ${ORIENTDB_DOWNLOAD_SERVER:-http://central.maven.org/maven2/com/orientechnologies}/orientdb-community/$ORIENTDB_VERSION/orientdb-community-$ORIENTDB_VERSION.tar.gz\r\n\r\nLABEL name=\"orientdb/orientdb\" \\\r\n      vendor=\"OrientDB LTD.\" \\\r\n      version=\"2.2\" \\\r\n      release=\"26\" \\\r\n      summary=\"OrientDB multi-model database\" \\\r\n      description=\"OrientDB multi-model database\" \\\r\n### Recommended labels below\r\n      url=\"https://www.orientdb.com\" \\\r\n      run='docker run -tdi --name ${NAME} ${IMAGE}' \\\r\n      io.k8s.description=\"OrientDB multi-model database\" \\\r\n      io.k8s.display-name=\"OrientDB multi-model database\" \\\r\n      io.openshift.expose-services=\"\" \\\r\n      io.openshift.tags=\"orientdb\"\r\n\r\n#Install JDK and necessary applications\r\nRUN yum -y install --disablerepo \"*\" --enablerepo rhel-7-server-rpms --setopt=tsflags=nodocs \\\r\n      java-1.8.0-openjdk wget rsync \u0026\u0026 \\\r\n    yum clean all\r\n\r\n#download distribution tar, untar and delete databases\r\nRUN mkdir /orientdb \u0026\u0026 \\\r\n    wget  $ORIENTDB_DOWNLOAD_URL \u0026\u0026 \\\r\n    echo \"$ORIENTDB_DOWNLOAD_MD5 *orientdb-community-$ORIENTDB_VERSION.tar.gz\" | md5sum -c - \u0026\u0026 \\\r\n    echo \"$ORIENTDB_DOWNLOAD_SHA1 *orientdb-community-$ORIENTDB_VERSION.tar.gz\" | sha1sum -c -\u0026\u0026 \\\r\n    tar -xvzf orientdb-community-$ORIENTDB_VERSION.tar.gz -C /orientdb --strip-components=1 \u0026\u0026 \\\r\n    mkdir /licenses \u0026\u0026 \\\r\n    cp /orientdb/license.txt /licenses/ \u0026\u0026 \\\r\n    rm orientdb-community-$ORIENTDB_VERSION.tar.gz \u0026\u0026 \\\r\n    rm -rf /orientdb/databases/* \u0026\u0026 \\\r\n    chown -R 1001 /orientdb \u0026\u0026 \\\r\n    chmod -R g=u /orientdb\r\n\r\n# ADD help.1 /help.1\r\n\r\nENV PATH /orientdb/bin:$PATH\r\n\r\nVOLUME [\"/orientdb/backup\", \"/orientdb/databases\", \"/orientdb/config\"]\r\n\r\nWORKDIR /orientdb\r\n\r\n#OrientDb binary\r\nEXPOSE 2424\r\n\r\n#OrientDb http\r\nEXPOSE 2480\r\n\r\n#Switch to non-root user\r\nUSER 1001\r\n\r\n#Default command start the server\r\nCMD [\"server.sh\"]"
        },
        "strategy": {
            "type": "Docker",
            "dockerStrategy": {}
        },
        "output": {
            "to": {
                "kind": "ImageStreamTag",
                "name": "orientdb:latest"
            }
        },
        "resources": {},
        "postCommit": {},
        "nodeSelector": null
    },
    "status": {
        "lastVersion": 0
    }
},
{
    "kind": "BuildConfig",
    "apiVersion": "v1",
    "metadata": {
        "name": "cmdb",
        "creationTimestamp": null,
        "labels": {
            "app": "cmdb",
            "template": "nodejs"
        },
        "annotations": {
            "openshift.io/generated-by": "OpenShiftWebConsole"
        }
    },
    "spec": {
        "triggers": [
            {
                "type": "Generic",
                "generic": {
                    "secret": "b9be1eea9b469fb1"
                }
            },
            {
                "type": "GitHub",
                "github": {
                    "secret": "826182135ae411e7"
                }
            },
            {
                "type": "ImageChange",
                "imageChange": {}
            },
            {
                "type": "ConfigChange"
            }
        ],
        "runPolicy": "Serial",
        "source": {
            "type": "Git",
            "git": {
                "uri": "https://github.com/bcgov/nrs-cmdb.git",
                "ref": "master"
            },
            "contextDir": "/research/Java"
        },
        "strategy": {
            "type": "Source",
            "sourceStrategy": {
                "from": {
                    "kind": "ImageStreamTag",
                    "namespace": "openshift",
                    "name": "wildfly:10.1"
                }
            }
        },
        "output": {
            "to": {
                "kind": "ImageStreamTag",
                "name": "cmdb:latest"
            }
        },
        "resources": {},
        "postCommit": {},
        "nodeSelector": null
    },
    "status": {
        "lastVersion": 0
    }
},
{
    "kind": "Route",
    "apiVersion": "v1",
    "metadata": {
        "name": "sonarqube",
        "creationTimestamp": null,
        "labels": {
            "app": "sonarqube"
        },
        "annotations": {
            "openshift.io/host.generated": "true"
        }
    },
    "spec": {
        "host": "sonarqube-csnr-dmod-tools.pathfinder.gov.bc.ca",
        "to": {
            "kind": "Service",
            "name": "sonarqube",
            "weight": 100
        },
        "port": {
            "targetPort": "9000-tcp"
        },
        "wildcardPolicy": "None"
    },
    "status": {
        "ingress": [
            {
                "host": "sonarqube-csnr-dmod-tools.pathfinder.gov.bc.ca",
                "routerName": "router",
                "conditions": [
                    {
                        "type": "Admitted",
                        "status": "True",
                        "lastTransitionTime": "2017-06-20T20:59:35Z"
                    }
                ],
                "wildcardPolicy": "None"
            }
        ]
    }
},
{
      "kind": "Secret",
      "apiVersion": "v1",
      "metadata": {
        "name": "sonarqube-secrets"
      },
      "stringData" : {
        "database-user" : "${SONAR_DATABASE_USER}",
        "database-password" : "${SONAR_DATABASE_PASSWORD}",
		"database-admin-password" : "${SONAR_DATABASE_ADMIN_PASSWORD}",
		"sonar-admin-password" : "${SONAR_ADMIN_PASSWORD}"
      }
    },
	{
      "kind": "PersistentVolumeClaim",
      "apiVersion": "v1",
      "metadata": {
        "name": "postgresql-sonarqube-pvc"
      },
      "spec": {
        "accessModes": [
          "ReadWriteOnce"
        ],
        "resources": {
          "requests": {
            "storage": "${DATABASE_VOLUME_CAPACITY}"
          }
        }
      }
    },
	{
      "kind": "PersistentVolumeClaim",
      "apiVersion": "v1",
      "metadata": {
        "name": "sonarqube-data"
      },
      "spec": {
        "accessModes": [
          "ReadWriteOnce"
        ],
        "resources": {
          "requests": {
            "storage": "2Gi"
          }
        }
      }
    },
	{
      "kind": "Service",
      "apiVersion": "v1",
      "metadata": {
        "name": "${DATABASE_SERVICE_NAME}",
        "annotations": {
          "description": "Exposes the database server"
        }
      },
      "spec": {
        "ports": [
          {
            "name": "postgres",
			"protocol": "TCP",
            "port": 5432,
            "targetPort": 5432,
			"nodePort": 0
          }
        ],
        "selector": {
          "app": "${DATABASE_SERVICE_NAME}"
        },
        "type": "ClusterIP",
        "sessionAffinity": "None"
      },
	   "status": {
        "loadBalancer": {}
      }
    },
	{
		"kind": "DeploymentConfig",
		"apiVersion": "v1",
		"metadata": {
			"name": "${DATABASE_SERVICE_NAME}",
			"generation": 1,
			"creationTimestamp": null,
			"labels": {
						"app": "${DATABASE_SERVICE_NAME}"
			},
			"annotations": {
				"description": "Defines how to deploy the database",
				"openshift.io/container.postgresql.image.entrypoint": "[\"container-entrypoint\",\"run-postgresql\"]"
			}
		},
		"spec": {
			"strategy": {
				"type": "Recreate"
			},
			"triggers": [
				{
					"type": "ConfigChange"
				},
				{
					"type": "ImageChange",
					"imageChangeParams": {
						"automatic": true,
						"containerNames": [
							"postgres"
						],
						"from": {
							"kind": "ImageStreamTag",
							"namespace":  "openshift",
							"name": "postgres:9.4"
						}
					}
				}
			],
			"replicas": 1,
			"test": false,
			"selector": {
				"app": "${DATABASE_SERVICE_NAME}",
				"deploymentconfig": "${DATABASE_SERVICE_NAME}"
			},

			"template": {
				"metadata": {
					"creationTimestamp": null,
					"labels": {
						"app": "${DATABASE_SERVICE_NAME}",
						"deploymentconfig": "${DATABASE_SERVICE_NAME}"
					},
					"annotations": {
						"openshift.io/container.postgresql.image.entrypoint": "[\"container-entrypoint\",\"run-postgresql\"]"
					}
				},
				"spec": {
					"volumes": [
						{
							"name": "${DATABASE_SERVICE_NAME}-data",
							"persistentVolumeClaim": {
								"claimName": "${DATABASE_SERVICE_NAME}-pvc"
							}
						}
					],
					"containers": [
						{
							"name": "postgres",
							"image": "registry.access.redhat.com/rhscl/postgresql-94-rhel7",
							"ports": [
								{
									"containerPort": 5432,
									"protocol": "TCP"
								}
							],
							"env": [
								{
									"name": "POSTGRESQL_DATABASE",
									"value": "sonarqube"
								},
								{
									"name": "POSTGRESQL_PASSWORD",
									"valueFrom": {
                                      "secretKeyRef" : {
                                        "name" : "sonarqube-secrets",
                                        "key" : "database-password"
										}
                                    }
								},
								{
									"name": "POSTGRESQL_ADMIN_PASSWORD",
									"valueFrom": {
                                      "secretKeyRef" : {
                                        "name" : "sonarqube-secrets",
                                        "key" : "database-admin-password"
										}
                                    }
								},
								{
									"name": "POSTGRESQL_USER",
									"valueFrom": {
                                      "secretKeyRef" : {
                                        "name" : "sonarqube-secrets",
                                        "key" : "database-user"
										}
                                    }
								}
							],
							"readinessProbe": {
								"timeoutSeconds": 1,
							  "initialDelaySeconds": 15,
							  "exec": {
								"command": [ "/bin/sh", "-i", "-c", "psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'"]
							  }
							},
							"livenessProbe": {
							  "timeoutSeconds": 1,
							  "initialDelaySeconds": 30,
							  "tcpSocket": {
								"port": 5432
							  }
							},
							"resources": {},
							"volumeMounts": [
								{
									"name": "${DATABASE_SERVICE_NAME}-data",
									"mountPath": "/var/lib/pgsql/data"
								}
							],
							"terminationMessagePath": "/dev/termination-log",
							"imagePullPolicy": "Always"
						}
					],
					"restartPolicy": "Always",
					"terminationGracePeriodSeconds": 30,
					"dnsPolicy": "ClusterFirst",
					"securityContext": {
                  "capabilities": {},
                  "privileged": false
                }
            },
			"restartPolicy": "Always",
            "dnsPolicy": "ClusterFirst"
		},
		"status": {}
	    }
    },
{
    "kind": "DeploymentConfig",
    "apiVersion": "v1",
    "metadata": {
        "name": "sonarqube",
        "generation": 1,
        "creationTimestamp": null,
        "labels": {
            "app": "sonarqube"
        }
    },
    "spec": {
        "strategy": {
            "type": "Rolling",
            "rollingParams": {
                "updatePeriodSeconds": 1,
                "intervalSeconds": 1,
                "timeoutSeconds": 600,
                "maxUnavailable": "25%",
                "maxSurge": "25%"
            },
            "resources": {},
            "activeDeadlineSeconds": 21600
        },
        "triggers": [
            {
                "type": "ConfigChange"
            },
            {
                "type": "ImageChange",
                "imageChangeParams": {
                    "automatic": true,
                    "containerNames": [
                        "sonarqube"
                    ],
                    "from": {
                        "kind": "ImageStreamTag",
                        "namespace": "openshift",
                        "name": "sonarqube:6.0"
                    }
                }
            }
        ],
        "replicas": 1,
        "test": false,
        "selector": {
            "app": "sonarqube",
            "deploymentconfig": "sonarqube"
        },
        "template": {
            "metadata": {
                "creationTimestamp": null,
                "labels": {
                    "app": "sonarqube",
                    "deploymentconfig": "sonarqube"
                },
                "annotations": {
                    "openshift.io/container.sonarqube.image.entrypoint": "[\"./bin/run.sh\"]"
                }
            },
            "spec": {
                "volumes": [
                    {
                        "name": "sonarqube-extensions",
                        "persistentVolumeClaim": {
                            "claimName": "sonarqube-data"
                        }
                    }
                ],
                "containers": [
                    {
                        "name": "sonarqube",
                        "image": "openshiftdemos/sonarqube@sha256:90bc4c270d3a9f9923ef0b38f7904cfb9c00e4307d4d853e9341a334e8f29cf0",
                        "ports": [
                            {
                                "containerPort": 9000,
                                "protocol": "TCP"
                            }
                        ],
                        "env": [
                            {
                                "name": "SONARQUBE_JDBC_USERNAME",
                                "valueFrom": {
                                      "secretKeyRef" : {
                                        "name" : "sonarqube-secrets",
                                        "key" : "database-user"
                                    }
                                }
                            },
                            {
                                "name": "SONARQUBE_JDBC_URL",
                                "value": "jdbc:postgresql://${DATABASE_SERVICE_NAME}/sonarqube"
                            },
                            {
                                "name": "SONARQUBE_JDBC_PASSWORD",
                                "valueFrom": {
                                      "secretKeyRef" : {
                                        "name" : "sonarqube-secrets",
                                        "key" : "database-password"
                                    }
                                }
                            },
                            {
                                "name": "SONARQUBE_ADMINPW",
                                "valueFrom": {
                                      "secretKeyRef" : {
                                        "name" : "sonarqube-secrets",
                                        "key" : "sonar-admin-password"
                                    }
                                }
                            }
                        ],
                        "resources": {
                            "limits": {
                                "cpu": "1",
                                "memory": "4Gi"
                            }
                        },
                        "volumeMounts": [
                            {
                                "name": "sonarqube-extensions",
                                "mountPath": "/opt/sonarqube/extensions"
                            }
                        ],
                        "readinessProbe": {
                            "httpGet": {
                                "path": "/",
                                "port": 9000,
                                "scheme": "HTTP"
                            },
                            "timeoutSeconds": 1,
                            "periodSeconds": 10,
                            "successThreshold": 1,
                            "failureThreshold": 3
                        },
                        "terminationMessagePath": "/dev/termination-log",
                        "imagePullPolicy": "IfNotPresent"
                    }
                ],
                "restartPolicy": "Always",
                "terminationGracePeriodSeconds": 30,
                "dnsPolicy": "ClusterFirst",
                "securityContext": {}
            }
        }
    },
    "status": {
        "latestVersion": 0,
        "observedGeneration": 0,
        "replicas": 0,
        "updatedReplicas": 0,
        "availableReplicas": 0,
        "unavailableReplicas": 0
    }
},
{
    "kind": "Service",
    "apiVersion": "v1",
    "metadata": {
        "name": "sonarqube",
        "creationTimestamp": null,
        "labels": {
            "app": "sonarqube"
        }
    },
    "spec": {
        "ports": [
            {
                "name": "9000-tcp",
                "protocol": "TCP",
                "port": 9000,
                "targetPort": 9000
            }
        ],
        "selector": {
            "app": "sonarqube",
            "deploymentconfig": "sonarqube"
        },
        "type": "ClusterIP",
        "sessionAffinity": "None"
    },
    "status": {
        "loadBalancer": {}
    }
}


],
  "parameters": [
    {
      "name": "S2I_NAMESPACE",
      "displayName": "Namespace",
      "description": "The OpenShift Namespace where the S2I ImageStream resides.",
      "value": "openshift"
    },
    {
      "name": "SOURCE_REPOSITORY_URL",
      "displayName": "Git Repository URL",
      "description": "The URL of the repository with your application source code.",
      "value": "https://github.com/bcgov/nrs-cmdb.git"
    },
    {
      "name": "SOURCE_REPOSITORY_REF",
      "displayName": "Git Reference",
      "description": "Set this to a branch name, tag or other ref of your repository if you are not using the default branch."
    },
    {
      "name": "CONTEXT_DIR",
      "displayName": "Context Directory",
      "description": "Set this to the relative path to your project if it is not in the root of your repository."
    },
    {
      "name": "GITHUB_WEBHOOK_SECRET",
      "displayName": "GitHub Webhook Secret",
      "description": "A secret string used to configure the GitHub webhook.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{40}"
    },
    {
      "name": "GENERIC_WEBHOOK_SECRET",
      "displayName": "Generic Webhook Secret",
      "description": "A secret string used to configure the Generic webhook.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{40}"
    },
	{
      "name": "SONAR_DATABASE_USER",
      "displayName": "DB Username",
      "description": "Username for Sonar Database user that will be used for accessing the database.",
      "generate": "expression",
      "from": "user[A-Z0-9]{3}"
    },
    {
      "name": "SONAR_DATABASE_PASSWORD",
      "displayName": "Database Password",
      "description": "Password for the Sonar Database user.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{16}"
    },
	{
      "name": "SONAR_DATABASE_ADMIN_PASSWORD",
      "displayName": "Database Admin Password",
      "description": "Password for the Admin Database user.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{16}"
    },
	{
      "name": "SONAR_ADMIN_PASSWORD",
      "displayName": "Sonar admin password",
      "description": "Password for the Sonar admin user.",
      "generate": "expression",
      "from": "[a-zA-Z0-9]{16}"
    },
	{
      "name": "DATABASE_VOLUME_CAPACITY",
      "displayName": "Database volume capacity",
      "description": "Size of the database used for SonarQube",
      "value": "5Gi"
    },
	{
      "name": "DATABASE_SERVICE_NAME",
      "displayName": "Database service name",
      "description": "Name of the database service",
      "value": "postgresql-sonarqube"
    }
  ]
}
